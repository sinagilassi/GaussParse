# import streamlit as st
# import io
# import pandas as pd
# import GaussParse as gp


# # title
# st.title("GaussPars")
# # description
# st.markdown("**GaussParse** is a versatile Python package designed for parsing output files generated by Gaussian software, \
#             a widely used computational chemistry tool. This package enables users to efficiently extract essential \
#                 information and perform various analytical tasks directly from Gaussian output files. Whether you need \
#                     to visualize energy profiles, analyze IRC (Intrinsic Reaction Coordinate) curves, retrieve summary \
#                         results, or extract molecular orientations, GaussParse provides a streamlined interface to \
#                         accomplish these tasks with ease.", unsafe_allow_html=False)


# # create sidebar
# # st.sidebar.title("Result Summary Conversion")
# # st.sidebar.markdown(
# #     "Select all Gaussian result txt format files that you want to add into an excel result summary file.")

# # # upload files
# # uploaded_files = st.sidebar.file_uploader("Choose a file", type=["txt"])

# # # add button
# # if uploaded_files is not None:
# #     st.write("File uploaded successfully")
# #     #


# # # Create dummy data for the Excel file
# # def create_excel_file():
# #     # Generate a sample DataFrame
# #     df = pd.DataFrame({
# #         'Name': ['Alice', 'Bob', 'Charlie', 'David'],
# #         'Age': [24, 27, 22, 32],
# #         'City': ['New York', 'San Francisco', 'Los Angeles', 'Chicago']
# #     })

# #     # Save the DataFrame to an Excel file in memory
# #     output = io.BytesIO()
# #     with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
# #         df.to_excel(writer, index=False, sheet_name='Sheet1')
# #     output.seek(0)  # Move to the beginning of the stream

# #     return output


# # # Button to create an Excel file
# # if st.button("Create Excel File"):
# #     excel_file = create_excel_file()
# #     st.success("Excel file created successfully!")

# #     # Button to download the Excel file
# #     st.download_button(
# #         label="Download Excel file",
# #         data=excel_file,
# #         file_name="dummy_data.xlsx",
# #         mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
# #     )


# # Sample dictionary of DataFrames
# data = {
#     'Sheet1': pd.DataFrame({'Name': ['Alice', 'Bob'], 'Age': [24, 27]}),
#     'Sheet2': pd.DataFrame({'City': ['New York', 'Chicago'], 'Population': [8419000, 2716000]})
# }

# # Function to convert dict of DataFrames to a multi-sheet Excel file


# def create_excel_from_dict(data_dict):
#     output = io.BytesIO()
#     with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
#         for sheet_name, df in data_dict.items():
#             df.to_excel(writer, index=False, sheet_name=sheet_name)
#     output.seek(0)  # Move to the beginning of the stream
#     return output


# # Streamlit app
# st.title("Multi-Sheet Excel File Creation and Download")

# # Button to create an Excel file
# if st.button("Create Multi-Sheet Excel File"):
#     excel_file = create_excel_from_dict(data)
#     st.success("Multi-sheet Excel file created successfully!")

#     # Button to download the Excel file
#     st.download_button(
#         label="Download Multi-Sheet Excel file",
#         data=excel_file,
#         file_name="multi_sheet_data.xlsx",
#         mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
#     )
